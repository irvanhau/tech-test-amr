// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	products "TechnicalTest/features/products"

	mock "github.com/stretchr/testify/mock"
)

// ProductDataInterface is an autogenerated mock type for the ProductDataInterface type
type ProductDataInterface struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: sort, keyword, filter, offset
func (_m *ProductDataInterface) GetAll(sort string, keyword string, filter string, offset int) ([]products.ProductInfo, map[string]interface{}, error) {
	ret := _m.Called(sort, keyword, filter, offset)

	var r0 []products.ProductInfo
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) ([]products.ProductInfo, map[string]interface{}, error)); ok {
		return rf(sort, keyword, filter, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int) []products.ProductInfo); ok {
		r0 = rf(sort, keyword, filter, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.ProductInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int) map[string]interface{}); ok {
		r1 = rf(sort, keyword, filter, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string, string, string, int) error); ok {
		r2 = rf(sort, keyword, filter, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Insert provides a mock function with given fields: newData
func (_m *ProductDataInterface) Insert(newData products.Product) (*products.Product, error) {
	ret := _m.Called(newData)

	var r0 *products.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(products.Product) (*products.Product, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(products.Product) *products.Product); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(products.Product) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductDataInterface creates a new instance of ProductDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductDataInterface {
	mock := &ProductDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
